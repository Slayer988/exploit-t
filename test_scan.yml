---
- name: Initiate Nessus Scan and Fetch Results
  hosts: thx_nessus
  gather_facts: no
  vars:
    nessus_url: "https://10.10.100.3:8834"  # Ensure this URL is correct
    nessus_username: "thx"
    nessus_password: "Secure.00"
    scan_name: "New_Scan"
    target_subnet: "10.10.200.0/29"
    validate_certs: no  # Disable SSL certificate validation for debugging
  tasks:
    - name: Authenticate with Nessus
      uri:
        url: "{{ nessus_url }}/session"
        method: POST
        body_format: json
        body:
          username: "{{ nessus_username }}"
          password: "{{ nessus_password }}"
        headers:
          Content-Type: "application/json"
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: auth_response

    - name: Set auth token fact
      set_fact:
        nessus_token: "{{ auth_response.json.token }}"

    - name: Create new scan using the default template
      uri:
        url: "{{ nessus_url }}/scans"
        method: POST
        body_format: json
        body:
          uuid: ""  # Leave uuid empty to use the default template
          settings:
            name: "{{ scan_name }}"
            enabled: true
            text_targets: "{{ target_subnet }}"
        headers:
          X-Cookie: "token={{ nessus_token }}"
          Content-Type: "application/json"
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: create_scan_response

    - name: Extract scan ID
      set_fact:
        scan_id: "{{ create_scan_response.json.scan.id }}"

    - name: Launch scan
      uri:
        url: "{{ nessus_url }}/scans/{{ scan_id }}/launch"
        method: POST
        headers:
          X-Cookie: "token={{ nessus_token }}"
          Content-Type: "application/json"
        validate_certs: "{{ validate_certs }}"
        return_content: yes

    - name: Wait for scan to complete
      uri:
        url: "{{ nessus_url }}/scans/{{ scan_id }}"
        method: GET
        headers:
          X-Cookie: "token={{ nessus_token }}"
        validate_certs: "{{ validate_certs }}"
        register: scan_status
        until: scan_status.json.info.status == "completed"
        retries: 30
        delay: 60

    - name: Export scan results
      uri:
        url: "{{ nessus_url }}/scans/{{ scan_id }}/export"
        method: POST
        body_format: json
        body:
          format: "csv"
        headers:
          X-Cookie: "token={{ nessus_token }}"
          Content-Type: "application/json"
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: export_response

    - name: Get file ID
      set_fact:
        file_id: "{{ export_response.json.file }}"

    - name: Download scan results
      uri:
        url: "{{ nessus_url }}/scans/{{ scan_id }}/export/{{ file_id }}/download"
        method: GET
        headers:
          X-Cookie: "token={{ nessus_token }}"
        dest: "scan_results.csv"
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: download_response

    - name: Save scan results to CSV file
      copy:
        content: "{{ download_response.content }}"
        dest: "./scan_results.csv"
