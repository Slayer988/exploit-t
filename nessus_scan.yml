---
- name: Initiate Nessus Scan and Retrieve Results
  hosts: localhost
  vars:
    nessus_host: "https://10.10.100.3:8834"
    nessus_access_key: "98a40d12e16331e7cf13460b35509969d1a85c9380de7e8b213f004bb80b75f5" 
    nessus_secret_key: "790b229aa6367f30b8fdddc1ec325ff71f5c6e8db220935b34ef62fe8b5161be" 
    nessus_scan_name: "Test Scan"
    target_hosts: "10.10.200.0/29" 
  tasks:
    - name: Create a new ad-hoc scan
      uri:
        url: "{{ nessus_host }}/scans"
        method: POST
        headers:
          X-ApiKeys: "accessKey={{ nessus_access_key }}; secretKey={{ nessus_secret_key }}"
        body: >
          {
            "uuid": "ad-hoc",
            "settings": {
              "name": "{{ nessus_scan_name }}",
              "text_targets": "{{ target_hosts }}"
            }
          }
        body_format: json
        status_code: 200
        validate_certs: no
        return_content: yes
      register: scan_response

    - name: Check scan creation response
      fail:
        msg: "Creating new scan failed. Response: {{ scan_response }}"
      when: scan_response.status != 200

    - name: Launch the scan
      uri:
        url: "{{ nessus_host }}/scans/{{ scan_response.json.scan.id }}/launch"
        method: POST
        headers:
          X-ApiKeys: "accessKey={{ nessus_access_key }}; secretKey={{ nessus_secret_key }}"
        status_code: 200
        validate_certs: no
        return_content: yes
      register: launch_response

    - name: Check scan launch response
      fail:
        msg: "Launching the scan failed. Response: {{ launch_response }}"
      when: launch_response.status != 200

    - name: Wait for scan to complete
      pause:
        minutes: 10

    - name: Get scan results
      uri:
        url: "{{ nessus_host }}/scans/{{ scan_response.json.scan.id }}"
        method: GET
        headers:
          X-ApiKeys: "accessKey={{ nessus_access_key }}; secretKey={{ nessus_secret_key }}"
        status_code: 200
        validate_certs: no
        return_content: yes
      register: scan_results

    - name: Check scan results response
      fail:
        msg: "Retrieving scan results failed. Response: {{ scan_results }}"
      when: scan_results.status != 200

    - name: Parse and display vulnerabilities
      set_fact:
        vulnerabilities: "{{ scan_results.json.vulnerabilities }}"

    - name: Display vulnerabilities
      debug:
        msg: >
          Host: {{ item.host }}
          Service: {{ item.plugin_name }}
          CVE: {{ item.cve }}
          CVSS: {{ item.cvss }}
      loop: "{{ vulnerabilities }}"
