---
- name: Nessus Scan Automation with API Keys
  hosts: localhost
  gather_facts: no
  vars:
    nessus_server: "https://10.10.100.3:8834"
    access_key: "9550aabda5d3f263bf3f3958272f55963626fdd7e1f2802761f6dd9b2f75ce06"
    secret_key: "468538bdbf80be87149b61b8e9bfd5a91db3add3bec47bfafb1303f6ec6ad157"
    scan_name: "thx_scan"
    alt_targets: "10.10.200.0/29"
    export_format: "csv"
    export_file_path: "/scan_results.csv"

  tasks:
    - name: Get list of policies
      uri:
        url: "{{ nessus_server }}/policies"
        method: GET
        headers:
          X-ApiKeys: "accessKey={{ access_key }}; secretKey={{ secret_key }}"
          Content-Type: "application/json"
        validate_certs: no
      register: policies_list

    - name: Extract a policy ID
      set_fact:
        policy_id: "{{ (policies_list.json.policies | first).id }}"

    - name: Create a new scan
      uri:
        url: "{{ nessus_server }}/scans"
        method: POST
        headers:
          X-ApiKeys: "accessKey={{ access_key }}; secretKey={{ secret_key }}"
          Content-Type: "application/json"
        body_format: json
        body: >
          {
            "uuid": "{{ policy_id }}",
            "settings": {
              "name": "{{ scan_name }}",
              "description": "Automated scan created by Ansible",
              "scanner_id": "1", 
              "policy_id": "{{ policy_id }}",
              "text_targets": "{{ alt_targets }}"
            }
          }
        validate_certs: no
      register: create_scan_result

    - name: Extract scan_id from the creation response
      set_fact:
        scan_id: "{{ create_scan_result.json.scan.id }}"

    - name: Start the created scan
      uri:
        url: "{{ nessus_server }}/scans/{{ scan_id }}/launch"
        method: POST
        headers:
          X-ApiKeys: "accessKey={{ access_key }}; secretKey={{ secret_key }}"
          Content-Type: "application/json"
        body_format: json
        validate_certs: no
      register: scan_result

    - name: Wait for scan to finish
      uri:
        url: "{{ nessus_server }}/scans/{{ scan_id }}"
        method: GET
        headers:
          X-ApiKeys: "accessKey={{ access_key }}; secretKey={{ secret_key }}"
          Content-Type: "application/json"
        validate_certs: no
      register: scan_status
      until: scan_status.json.info.status == "completed"
      retries: 60
      delay: 30

    - name: Request scan export
      uri:
        url: "{{ nessus_server }}/scans/{{ scan_id }}/export"
        method: POST
        headers:
          X-ApiKeys: "accessKey={{ access_key }}; secretKey={{ secret_key }}"
          Content-Type: "application/json"
        body_format: json
        body: '{"format": "{{ export_format }}"}'
        validate_certs: no
      register: export_result

    - name: Wait for export to be ready
      uri:
        url: "{{ nessus_server }}/scans/{{ scan_id }}/export/{{ export_result.json.file }}"
        method: GET
        headers:
          X-ApiKeys: "accessKey={{ access_key }}; secretKey={{ secret_key }}"
          Content-Type: "application/json"
        validate_certs: no
      register: export_status
      until: export_status.json.status == "ready"
      retries: 20
      delay: 15

    - name: Download scan results
      uri:
        url: "{{ nessus_server }}/scans/{{ scan_id }}/export/{{ export_result.json.file }}/download"
        method: GET
        headers:
          X-ApiKeys: "accessKey={{ access_key }}; secretKey={{ secret_key }}"
          Content-Type: "application/json"
        validate_certs: no
        return_content: yes
      register: download_result

    - name: Save scan results to CSV file
      copy:
        content: "{{ download_result.content }}"
        dest: "{{ export_file_path }}"
